#!/bin/sh
ROOT_DIR=$(realpath $(dirname "$0")/..)
cd "$ROOT_DIR" || exit 1


function _fetch_link()
{
    local link_path="${1:-}"
    local repo_name="${2:-}"
    local ref="${3:-}"

    if [ -z "$link_path" ] || [ -z "$repo_name" ] || [ -z "$ref" ]; then
        echo "ERROR: Invalid link. It should contain values for the following params separated by spaces:" \
            "<link path in project> <repo name> <ref>" >&2
        echo "But got: <$link_path> <$repo_name> <$ref>" >&2
        return 1
    fi
    (
        set -eu

        local git_base_url=$(git config --get remote.origin.url | sed -E "s~([^/:]+)/([^/]+)[.]git$~~g" )
        local target_repo_url="${git_base_url}${repo_name}.git"

        case "$link_path" in
            *.link) ;;
            *) link_path="$link_path.link" ;;
        esac

        echo "LINK_PATH  = $link_path"
        echo "REPO_URL   = $target_repo_url"
        echo "REF        = $ref"
        echo

        if [ -L "$link_path" ]; then
            rm "$link_path"
        elif [ -e "$link_path" ]; then
            read -rp "Path already exists and is not a symlink. Override $link_path? (y/N) " answer
            case "$answer" in
                [yY])
                    rm -rf "$link_path";;
                *)
                    echo "ERROR: Skipping." >&2
                    return 1;;
            esac
            unset answer
            echo
        fi

        echo "Cloning $target_repo_url checkout at $ref in link directory: $link_path"
        mkdir -p "$link_path"
        cd "$link_path"
        git init -q
        git remote add origin "$target_repo_url"
        git fetch --depth 1 origin "$ref"
        git checkout "$ref" -q
    )
}


function fetch_links()
{
    local links_file="$ROOT_DIR/.links_conf"
    if [ ! -f "$links_file" ]; then
        echo "ERROR: Links config file not found: $links_file"
        return 1
    fi

    # Read link config file but skip empty lines and comments
    trap 'unset IFS' EXIT
    IFS='
'
    for line in $(cat "$links_file" | sed '/^\s*#/d; /^\s*$/d; s/\s*#.*$//g'); do
        IFS=' '
        set -- $line
        _fetch_link "$@"
        IFS='
'
    done
    unset line
}



fetch_links "$@"
