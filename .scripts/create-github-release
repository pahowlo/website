#!/bin/sh
alias _is_run='!(return 0 2>/dev/null)'

if _is_run; then
    SCRIPTS_DIR=$(dirname "$(realpath "$0")")
else
    if [ -z "${SCRIPTS_DIR:-}" ]; then
        echo "ERROR: If sourced and not run, SCRIPTS_DIR env var must contain the path to scripts directory" >&2
        return 1  # sourced
    fi
fi

. "$SCRIPTS_DIR/common/logs.sh"


# == Main function
function create_github_release()
{

    local version="${1:-}"
    if [ -z "$version" ]; then
        log_error "Version argument is required to create GitHub tag." >&2
        return 1
    fi

    local shell_options=$(set +o); set +e
    (
        set -eu

        local github_repository=$(git config --get remote.origin.url | sed -E "s~.*[:/]([^/:]+)/([^/]+)[.]git$~\1/\2~g" )
        echo "REPOSITORY = $github_repository"
        echo "VERSION    = $version"
        echo

        # Check if release already exists
        if gh release view "$version" --repo "$github_repository" >/dev/null 2>&1; then
            read -rp "Do you want to delete the existing release of $version in $github_repository? (y/N) " answer
            case "$answer" in
                y|Y)
                    # Delete previous release and tag of same version
                    gh release delete "$version" --repo "$github_repository" -y --cleanup-tag 2>/dev/null || true
                    echo
                    ;;
                *)
                    return 1;;
            esac
        fi

        # Delete previous tag of same version if it exists
        git tag  --delete "$version" 2>/dev/null || true

        # Create and push new tag
        git tag -s "$version" -m ""
        git push origin "$version" --force

        # Create a release on GitHub
        gh release create "$version" --repo "$github_repository" --title "$version"
    )
    exit_code=$?
    eval "$shell_options"

    if [ "$exit_code" -ne 0 ]; then
        log_error "Failed to publish to $TARGET_REPOSITORY" >&2
        return 1
    fi
    return 0
}


if _is_run; then
    create_github_release "$@"
fi
