#!/bin/sh
(return 0 2>/dev/null) && {
    echo "ERROR: This script cannot be sourced. It must be run." >&2
    return 1
}

SCRIPTS_DIR=$(dirname "$(realpath "$0")")
ROOT_DIR=$(realpath "$SCRIPTS_DIR/..")

. "$SCRIPTS_DIR/common/logs.sh"
. "$SCRIPTS_DIR/common/utils.sh"


# == Constants
TARGET_REPOSITORY="pahowlo/pahowlo.github.io"
TARGET_BRANCH="main"


# == Main function
# Publish the built application to the target repository
function publish()
{
    local shell_options=$(set +o); set +e
    (
        set -eu

        # Unsure we are using the same version as specified in links config
        $SCRIPTS_DIR/fetch_links

        # Build if build was not found
        if [ -z "$(ls -A "$ROOT_DIR/target" 2>/dev/null)" ]; then
            pnpm install:all
            pnpm build:all
        fi

        # Parse arguments
        local version_number=$(jq -r .version package.json)
        local git_base_url=$(git config --get remote.origin.url | sed -E "s~([^/:]+)/([^/]+)[.]git$~~g" )

        mkdir -p "$ROOT_DIR/tmp"
        local temp_dir=$(mktemp -d -p "$ROOT_DIR/tmp" "publish-XXXXXXXX")
        echo "TEMP_DIR       = $temp_dir"
        trap 'rm -rf "$temp_dir"' EXIT

        echo "VERSION_NUMBER = $version_number"
        echo "TEMP_DIR       = $temp_dir"
        echo

        cd "$temp_dir"

        # Clone target repository and remove old files
        git clone --branch "$TARGET_BRANCH" --depth 1 "$git_base_url$TARGET_REPOSITORY.git" .
        find . -mindepth 1 -maxdepth 1 ! -name '.git' ! -name 'LICENSE' ! -name 'README.md' \
            -exec rm -r {} \;

        # Copy new files to the target repository
        cp -r "$ROOT_DIR/target/." ./

        echo
        find . -mindepth 1 -maxdepth 5 ! -path './.git*' | cut -c3- | sort
        echo

        git add -A

        # Verify that there are actual changes in target repository to commit
        if git diff --quiet HEAD; then
            echo "[INFO] No changes to commit." >&2
            return 0
        fi

        # Create tag from source repository
        cd $ROOT_DIR
        $SCRIPTS_DIR/create-github-release "v$version_number"

        # Commit and push changes
        cd "$temp_dir"
        local new_commit_msg="Release v$version_number"

        local commit_args=
        if [ "$new_commit_msg" = "$(git log -1 --pretty=format:"%s")" ]; then
            commit_args+=" --amend"  # Last commit add same name
        else
            commit_args+=" --edit -m \"$new_commit_msg\""
        fi
        eval "git commit $commit_args"
        git push --force-with-lease
    )
    exit_code=$?
    eval "$shell_options"

    if [ "$exit_code" -ne 0 ]; then
        log_error "Failed to publish to $TARGET_REPOSITORY" >&2
        return 1
    fi
    return 0
}


publish "$@"
